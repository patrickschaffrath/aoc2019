#lang racket

(provide 3-1 3-2)

(define wire-one '((#\R 990) (#\U 475) (#\L 435) (#\D 978) (#\L 801) (#\D 835) (#\L 377) (#\D 836) (#\L 157) (#\D 84) (#\R 329) (#\D 342) (#\R 931) (#\D 522) (#\L 724) (#\U 891) (#\L 508) (#\U 274) (#\L 146) (#\U 844) (#\R 686) (#\D 441) (#\R 192) (#\U 992) (#\L 781) (#\D 119) (#\R 436) (#\D 286) (#\R 787) (#\D 85) (#\L 801) (#\U 417) (#\R 619) (#\D 710) (#\R 42) (#\U 261) (#\R 296) (#\U 697) (#\L 354) (#\D 843) (#\R 613) (#\U 880) (#\R 789) (#\D 134) (#\R 636) (#\D 738) (#\L 939) (#\D 459) (#\L 338) (#\D 905) (#\R 811) (#\D 950) (#\L 44) (#\U 992) (#\R 845) (#\U 771) (#\L 563) (#\D 76) (#\L 69) (#\U 839) (#\L 57) (#\D 311) (#\L 615) (#\D 931) (#\L 437) (#\D 201) (#\L 879) (#\D 1) (#\R 978) (#\U 415) (#\R 548) (#\D 398) (#\L 560) (#\D 112) (#\L 894) (#\D 668) (#\L 708) (#\D 104) (#\R 622) (#\D 768) (#\R 901) (#\D 746) (#\L 793) (#\D 26) (#\R 357) (#\U 216) (#\L 216) (#\D 33) (#\L 653) (#\U 782) (#\R 989) (#\U 678) (#\L 7) (#\D 649) (#\R 860) (#\D 281) (#\L 988) (#\U 362) (#\L 525) (#\U 652) (#\R 620) (#\D 376) (#\L 983) (#\U 759) (#\R 828) (#\D 669) (#\L 297) (#\U 207) (#\R 68) (#\U 77) (#\R 255) (#\U 269) (#\L 661) (#\U 310) (#\L 309) (#\D 490) (#\L 55) (#\U 471) (#\R 260) (#\D 912) (#\R 691) (#\D 62) (#\L 63) (#\D 581) (#\L 289) (#\D 366) (#\L 862) (#\D 360) (#\L 485) (#\U 946) (#\R 937) (#\D 470) (#\L 792) (#\D 614) (#\R 936) (#\D 963) (#\R 611) (#\D 151) (#\R 908) (#\D 195) (#\R 615) (#\U 768) (#\L 166) (#\D 314) (#\R 640) (#\U 47) (#\L 161) (#\U 872) (#\R 50) (#\U 694) (#\L 917) (#\D 149) (#\L 92) (#\U 244) (#\L 337) (#\U 479) (#\R 755) (#\U 746) (#\L 196) (#\D 759) (#\L 936) (#\U 61) (#\L 744) (#\D 774) (#\R 53) (#\U 439) (#\L 185) (#\D 504) (#\R 769) (#\D 696) (#\L 285) (#\D 396) (#\R 791) (#\U 21) (#\L 35) (#\D 877) (#\L 9) (#\U 398) (#\R 447) (#\U 101) (#\R 590) (#\U 862) (#\L 351) (#\D 210) (#\L 935) (#\U 938) (#\R 131) (#\U 758) (#\R 99) (#\U 192) (#\L 20) (#\U 142) (#\L 946) (#\D 981) (#\R 998) (#\U 214) (#\R 174) (#\U 710) (#\L 719) (#\D 879) (#\L 411) (#\U 839) (#\L 381) (#\U 924) (#\L 221) (#\D 397) (#\R 380) (#\U 715) (#\R 139) (#\D 367) (#\R 253) (#\D 973) (#\L 9) (#\U 624) (#\L 426) (#\D 885) (#\R 200) (#\U 940) (#\R 214) (#\D 75) (#\R 717) (#\D 2) (#\R 578) (#\U 161) (#\R 421) (#\U 326) (#\L 561) (#\U 311) (#\L 701) (#\U 259) (#\R 836) (#\D 920) (#\R 35) (#\D 432) (#\R 610) (#\D 63) (#\R 664) (#\D 39) (#\L 119) (#\D 47) (#\L 605) (#\D 228) (#\L 364) (#\D 14) (#\L 226) (#\D 365) (#\R 796) (#\D 233) (#\R 476) (#\U 145) (#\L 926) (#\D 907) (#\R 681) (#\U 267) (#\R 844) (#\U 735) (#\L 948) (#\U 344) (#\L 629) (#\U 31) (#\L 383) (#\U 694) (#\L 666) (#\U 158) (#\R 841) (#\D 27) (#\L 150) (#\D 950) (#\L 335) (#\U 275) (#\L 184) (#\D 157) (#\R 504) (#\D 602) (#\R 605) (#\D 185) (#\L 215) (#\D 420) (#\R 700) (#\U 809) (#\L 139) (#\D 937) (#\L 248) (#\U 693) (#\L 56) (#\U 92) (#\L 914) (#\U 743) (#\R 445) (#\U 417) (#\L 504) (#\U 23) (#\R 332) (#\U 865) (#\R 747) (#\D 553) (#\R 595) (#\U 845) (#\R 693) (#\U 915) (#\R 81)))

(define wire-two '((#\L 1004) (#\U 406) (#\L 974) (#\D 745) (#\R 504) (#\D 705) (#\R 430) (#\D 726) (#\R 839) (#\D 550) (#\L 913) (#\D 584) (#\R 109) (#\U 148) (#\L 866) (#\U 664) (#\R 341) (#\U 449) (#\L 626) (#\D 492) (#\R 716) (#\U 596) (#\L 977) (#\D 987) (#\L 47) (#\U 612) (#\L 478) (#\U 928) (#\L 66) (#\D 752) (#\R 665) (#\U 415) (#\R 543) (#\U 887) (#\R 315) (#\D 866) (#\R 227) (#\D 615) (#\R 478) (#\U 180) (#\R 255) (#\D 316) (#\L 955) (#\U 657) (#\R 752) (#\U 561) (#\R 786) (#\U 7) (#\R 918) (#\D 755) (#\R 506) (#\U 131) (#\L 875) (#\D 849) (#\R 823) (#\D 755) (#\L 604) (#\U 944) (#\R 186) (#\D 326) (#\L 172) (#\U 993) (#\L 259) (#\D 765) (#\R 427) (#\D 193) (#\R 663) (#\U 470) (#\L 294) (#\D 437) (#\R 645) (#\U 10) (#\L 926) (#\D 814) (#\L 536) (#\D 598) (#\R 886) (#\D 290) (#\L 226) (#\U 156) (#\R 754) (#\D 105) (#\L 604) (#\D 136) (#\L 883) (#\U 87) (#\R 839) (#\D 807) (#\R 724) (#\U 184) (#\L 746) (#\D 79) (#\R 474) (#\U 186) (#\R 727) (#\U 9) (#\L 69) (#\U 565) (#\R 459) (#\D 852) (#\R 61) (#\U 370) (#\L 890) (#\D 439) (#\L 431) (#\U 846) (#\R 460) (#\U 358) (#\R 51) (#\D 407) (#\R 55) (#\U 179) (#\L 385) (#\D 652) (#\R 193) (#\D 52) (#\L 569) (#\U 980) (#\L 185) (#\U 813) (#\R 636) (#\D 275) (#\L 585) (#\U 590) (#\R 215) (#\U 947) (#\R 851) (#\D 127) (#\L 249) (#\U 954) (#\L 884) (#\D 235) (#\R 3) (#\U 735) (#\R 994) (#\D 883) (#\L 386) (#\D 506) (#\L 963) (#\D 751) (#\L 989) (#\U 733) (#\L 221) (#\U 890) (#\L 711) (#\D 32) (#\L 74) (#\U 437) (#\L 700) (#\D 977) (#\L 49) (#\U 478) (#\R 438) (#\D 27) (#\R 945) (#\D 670) (#\L 230) (#\U 863) (#\L 616) (#\U 461) (#\R 267) (#\D 25) (#\L 646) (#\D 681) (#\R 426) (#\D 918) (#\L 791) (#\U 712) (#\L 730) (#\U 715) (#\L 67) (#\U 359) (#\R 915) (#\D 524) (#\L 722) (#\U 374) (#\L 582) (#\U 529) (#\L 802) (#\D 865) (#\L 596) (#\D 5) (#\R 323) (#\U 235) (#\R 405) (#\D 62) (#\R 304) (#\U 996) (#\L 939) (#\U 420) (#\L 62) (#\D 299) (#\R 802) (#\D 803) (#\L 376) (#\U 430) (#\L 810) (#\D 334) (#\L 67) (#\U 395) (#\L 818) (#\U 953) (#\L 817) (#\D 411) (#\L 225) (#\U 383) (#\R 247) (#\D 234) (#\L 430) (#\U 315) (#\L 418) (#\U 254) (#\L 964) (#\D 372) (#\R 979) (#\D 301) (#\R 577) (#\U 440) (#\R 924) (#\D 220) (#\L 121) (#\D 785) (#\L 609) (#\U 20) (#\R 861) (#\U 288) (#\R 388) (#\D 410) (#\L 278) (#\D 748) (#\L 800) (#\U 755) (#\L 919) (#\D 985) (#\L 785) (#\U 676) (#\R 916) (#\D 528) (#\L 507) (#\D 469) (#\L 582) (#\D 8) (#\L 900) (#\U 512) (#\L 764) (#\D 124) (#\L 10) (#\U 567) (#\L 379) (#\D 231) (#\R 841) (#\D 244) (#\R 479) (#\U 145) (#\L 769) (#\D 845) (#\R 651) (#\U 712) (#\L 920) (#\U 791) (#\R 95) (#\D 958) (#\L 608) (#\D 755) (#\R 967) (#\U 855) (#\R 563) (#\D 921) (#\L 37) (#\U 699) (#\L 944) (#\U 718) (#\R 959) (#\D 195) (#\L 922) (#\U 726) (#\R 378) (#\U 258) (#\R 340) (#\D 62) (#\L 555) (#\D 135) (#\L 690) (#\U 269) (#\L 273) (#\D 851) (#\L 60) (#\D 851) (#\R 1) (#\D 315) (#\R 117) (#\D 855) (#\L 275) (#\D 288) (#\R 25) (#\U 503) (#\R 569) (#\D 596) (#\L 823) (#\U 687) (#\L 450)))

(define (expand-path path movement)
    (let (
        [last-x (first (last path))]
        [last-y (second (last path))]
        [direction (first movement)]
        [steps (second movement)])
            (cond
                [(equal? direction #\U) (append path (for/list ([i (range steps)]) (list last-x (+ last-y (add1 i)))))]
                [(equal? direction #\D) (append path (for/list ([i (range steps)]) (list last-x (- last-y (add1 i)))))]
                [(equal? direction #\L) (append path (for/list ([i (range steps)]) (list (- last-x (add1 i)) last-y)))]
                [else (append path (for/list ([i (range steps)]) (list (+ last-x (add1 i)) last-y)))])))

(define (create-path movements)
    (define (create-path* path movements)
        (if (null? movements) path
            (create-path* (expand-path path (car movements)) (cdr movements))))
    (cdr (create-path* '((0 0)) movements)))

(define (manhattan-distance vertex)
    (apply + (map abs vertex)))

(define (intersections moves-one moves-two)
    (define (duplicates found paths)
        (if (null? paths) found
            (duplicates (remove (car paths) found) (cdr paths))))
    (let* (
        [path-one (remove-duplicates (create-path moves-one))]
        [path-two (remove-duplicates (create-path moves-two))]
        [combined-paths (append path-one path-two)])
            (duplicates combined-paths (remove-duplicates combined-paths))))

(define (3-1)
    (manhattan-distance (argmin manhattan-distance (intersections wire-one wire-two))))

(define (3-2)
    (define (steps path until-vertex)
        (add1 (length (takef path (Î» (v) (not (equal? v until-vertex)))))))
    (let (
        [intersections* (intersections wire-one wire-two)]
        [steps-one (curry steps (create-path wire-one))]
        [steps-two (curry steps (create-path wire-two))])
            (apply min (map + (map steps-one intersections*) (map steps-two intersections*)))))
